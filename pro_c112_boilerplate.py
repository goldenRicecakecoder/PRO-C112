# -*- coding: utf-8 -*-
"""PRO-C112 Boilerplate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SV9oF-xxiccW0A3clnZM4JOluftmw1rW

## Load Data

**Image Dataset Directory Structur**e:

**Note: The directory and sub-directory names shown here are only for explanation purposes which might differ from the code.**

Suppose if we have a master directory(folder) of the Images then we can subdivide it into “Training”, “Validation” & “Testing” images sub-directories(sub-folder).

And then the “Training” directories contain sub-directories(sub-folders) called “Infected” and “Uninfected” which contain appropriate images in the respective sub-directories.

Similarly, the “Validation'' & “Testing” directory also contains sub-directories(sub-folders) called “Infected” and “Uninfected” which contain appropriate images in the respective sub-directories.


**Training**: Images in this directory will be used for the training of the data.

**Validation**: Images in this directory will be used to validate the model training. The validation dataset allows us to see how well the data generalises the classification.

**Testing**: Images in this directory will be used to test how well the model is trained.
<img src="https://s3-whjr-curriculum-uploads.whjr.online/2467514a-e93f-4a0f-8e20-b3893dfa9144.jpeg" width= 600>
"""

!git clone https://github.com/procodingclass/PRO-M3-Pneumothorax-Image-Dataset

"""## Image Preprocessing

1. Convert each image to an array
2. Map each image labels
3. Augment the each image

### Image Preprocessing: Mapping each image with labels

<center><b>Mapping Each Image With Labels</b><br><img src="https://s3-whjr-curriculum-uploads.whjr.online/1bdade80-2a32-4fc2-8902-f18067803dba.jpeg" width= 1000>

### Image Preprocessing: Data Augmentation

A few Data Augemtation Techniques:

*   Image Rotation
*   Image Height & Width Shift
*   Image Horizontal & Vertical Flipping
*   Image Resizing
*   Image Zooming


<img src="https://s3-whjr-curriculum-uploads.whjr.online/5403e9b1-a339-405d-98b3-36826ec3f04a.gif" width= 400>

#### Training Data
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing.image import img_to_array, load_img


# Random Data Augmentation(Rescale, Rotation, Flips, Zoom, Shifts) using ImageDataGenerator
training_data_generator = ImageDataGenerator(
    rescale = 1.0/255,
    rotation_range=40,
    width_shift_range=0.3,
    height_shift_range=0.3,
    zoom_range=0.3,
    horizontal_flip=True,
    vertical_flip=True,
    fill_mode='nearest')


# Image Directory
training_image_directory = "/content/PRO-M3-Pneumothorax-Image-Dataset/training_dataset"

# Generate Preprocessed Augmented Data
training_augmented_images = training_data_generator.flow_from_directory(
    training_image_directory,
    target_size=(180,180))

"""#### Validation Data"""

# Random Data Augmentation(Rescale) using ImageDataGenerator
validation_data_generator = ImageDataGenerator(rescale = 1.0/255)

# Image Directory
validation_image_directory = "/content/PRO-M3-Pneumothorax-Image-Dataset/validation_dataset"

# Generate Preprocessed Augmented Data
validation_augmented_images = validation_data_generator.flow_from_directory(
    validation_image_directory,
    target_size=(180,180))

"""#### Class Labels"""

training_augmented_images.class_indices

"""## Convolutional Neural Network Architecture
A CNN model have:

1. **Feature Learning layers**:

   1.1 Convolution + Activation(RELU) layers

   1.2 Pooling layers

2. **Classification layers**:

   2.1 Flatten layer

   2.2 Fully connected(Dense) layer

   2.3 Fully connected(Dense) layer with Softmax




<img src="https://s3-whjr-curriculum-uploads.whjr.online/9d09af47-3a9d-48b7-a05c-8941009442ea.png" width= 1500>

**Feature Extraction Visualisation(Convolution + Relu)**

The convolution is a mathematical computation between two arrays, the image array and the filter array which gives a new image array.


Visually we can understand that the feature detector/filter moves over the image to extract features from the image.



[<img src="https://s3-whjr-curriculum-uploads.whjr.online/3917c089-1d8f-4f32-b5c4-401b6abe8d47.gif" width= 500>](https://)

## Mathematically:

**Conv2D Layer**

The convolution is a mathematical computation between two 2D arrays, the image array and the filter array which gives a new image array.

A portion of the input image array matrix, called a sub-array(size same as the size of the filter) is taken, starting from the top left.

This sub-array is multiplied with the filter array. We can multiply one array matrix to another, by multiplying 1st element to 1st element of both the arrays(2nd element to 2nd element of both arrays and so on).

After multiplying the result is added, which gives the value of the 1st element of the new image array.

Then we shift towards right by one column, repeat the above steps to get the value of the 2nd element of the new array.

Once the whole row is finished we shift downwards by one row, repeat the above steps to get the value of all elements of the new array one by one.

The whole process is repeated with different filters, to get different output, which all together is the output of the 1st Conv2D layer.

These outputs from the 1st Conv2D layer are given to the 2nd Conv2D layer and convolutions are performed.

This repeated for all the layers of the CNN model.


<img src="https://s3-whjr-curriculum-uploads.whjr.online/306591ba-2163-45d9-9c60-dbc895332982.gif" width= 800>

**ReLU**

ReLU is defined as a function, y= f(x) such that it gives x for all values of x > 0 and 0 for all values of x<0.

<img src="https://s3-whjr-curriculum-uploads.whjr.online/6986c680-7ad3-4fad-bf04-59cecfa5e0e3.png" width= 600>

**MaxPooling2D**

First there is an input array(for example 4x4) and pool size(for example 2x2). Pool size is always smaller than the input array size.

Then the maximum value is taken from the sub-array of size equal to pool size.

The result after applying the Max Pooling will be the new array of size equal to the half of the size of the original input array.

Since our input array is 4x4, after max pooling the new array will be 2x2, hence reducing the dimension of the array.


<img src="https://s3-whjr-curriculum-uploads.whjr.online/d485cb40-4db6-4fb6-9051-d9e888883053.jpg" width= 800>

## Define Convolution Neural Network(CNN) Model
"""

import tensorflow as tf

## ADD CODE HERE

"""## Model Summary"""

## ADD CODE HERE